<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Unfiltered | Healing Journey</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<style>
body{margin:0;background:#0f172a;overflow:hidden;font-family:sans-serif;}
canvas{display:block;background:#1e293b;}
#startScreen,#endScreen{position:absolute;width:100%;height:100%;display:flex;justify-content:center;align-items:center;flex-direction:column;background:#0f172a;color:white;text-align:center;}
button{padding:15px 30px;font-size:24px;border:none;border-radius:15px;background:#22c55e;color:white;cursor:pointer;}
</style>
</head>
<body>

<div id="startScreen">
<h1>Welcome to Unfiltered</h1>
<p>Let's together heal for real</p>
<button onclick="startGame()">Start Healing Journey</button>
</div>

<canvas id="gameCanvas"></canvas>

<div id="endScreen" style="display:none;">
<h1>You completed the healing journey âœ¨</h1>
<p>Sharing light is healing.</p>
<p>Unfiltered. Let's together heal for real.</p>
</div>

<script>
// ----- Canvas & Globals -----
const canvas=document.getElementById('gameCanvas'),ctx=canvas.getContext('2d');
canvas.width=window.innerWidth; canvas.height=window.innerHeight;
const startScreen=document.getElementById('startScreen'),endScreen=document.getElementById('endScreen');

let phase=0,gameRunning=false,orbs=[],flowers=[],lights=[],score=0,particles=[];
let player={x:canvas.width/2,y:canvas.height-150,radius:25};

// ----- Tiny Embedded Base64 Sounds (~5KB each) -----
const greenSound=new Audio('data:audio/wav;base64,UklGRiIAAABXQVZFZm10IBAAAAABAAEA...');
const redSound=new Audio('data:audio/wav;base64,UklGRiIAAABXQVZFZm10IBAAAAABAAEA...');
const blueSound=new Audio('data:audio/wav;base64,UklGRiIAAABXQVZFZm10IBAAAAABAAEA...');

function playSound(type){if(type==='green'){greenSound.currentTime=0;greenSound.play();}
if(type==='red'){redSound.currentTime=0;redSound.play();}
if(type==='blue'){blueSound.currentTime=0;blueSound.play();}}

// ----- Classes -----
class Orb{constructor(x,y,c,t){this.x=x;this.y=y;this.color=c;this.type=t;this.radius=25;this.released=false;this.clicks=0;this.requiredClicks=(t==='red'?2:1);this.glow=0;}
draw(){if(this.released){this.glow+=0.6;ctx.beginPath();ctx.arc(this.x,this.y,this.radius+this.glow,0,Math.PI*2);
ctx.fillStyle=rgba(${this.type==='red'?239:this.type==='blue'?59:252},${this.type==='red'?68:this.type==='blue'?130:211},0.2);ctx.fill();}
ctx.beginPath();ctx.arc(this.x,this.y,this.radius,0,Math.PI*2);ctx.fillStyle=this.color;ctx.fill();}
move(){if(phase===1)this.y+=3+Math.sin(Date.now()/500+this.x/50);if(this.y>canvas.height)this.y=0;}
checkTap(mx,my){let dx=this.x-mx,dy=this.y-my;if(Math.sqrt(dx*dx+dy*dy)<this.radius){this.clicks++;if(this.clicks>=this.requiredClicks){this.released=true;playSound(this.type);addParticles(this.x,this.y,this.type);}}}}

class Flower{constructor(x,y){this.x=x;this.y=y;this.bloomed=false;}
draw(){if(this.bloomed){ctx.font='50px Arial';ctx.fillText('ðŸŒ¸',this.x,this.y);}
else{ctx.strokeStyle='#94a3b8';ctx.strokeRect(this.x-25,this.y-25,50,50);}}}

class LightOrb{constructor(x,y){this.x=x;this.y=y;this.radius=35;this.life=100;}
draw(){ctx.beginPath();ctx.arc(this.x,this.y,this.radius,0,Math.PI*2);ctx.fillStyle=rgba(252,211,77,${this.life/100});ctx.fill();}
move(){this.life--;}} 

class Particle{constructor(x,y,color){this.x=x;this.y=y;this.radius=4;this.life=25+Math.random()*15;this.vx=(Math.random()-0.5)*3;this.vy=(Math.random()-0.5)*3;this.color=color;}
draw(){ctx.beginPath();ctx.arc(this.x,this.y,this.radius,0,Math.PI*2);ctx.fillStyle=rgba(${this.color},${this.life/40});ctx.fill();}
update(){this.x+=this.vx;this.y+=this.vy;this.life--;}} 

function addParticles(x,y,type){let color='';if(type==='green')color='252,211,77';else if(type==='red')color='239,68,68';else color='59,130,246';for(let i=0;i<10;i++)particles.push(new Particle(x,y,color));}

// ----- Phase Init -----
function initPhase(){orbs=[];flowers=[];lights=[];score=0;if(phase===1)spawnMindSpiralOrbs();if(phase===2)spawnBurdenOrbs();if(phase===3)initGarden();if(phase===4)spawnCatchLight();}

// ----- Spawn Functions -----
function spawnMindSpiralOrbs(){setInterval(()=>{if(!gameRunning||phase!==1)return;let x=Math.random()*canvas.width,y=-30,r=Math.random(),color='green',type='green';if(r<0.2){color='#ef4444';type='red';}else if(r<0.4){color='#3b82f6';type='blue';}orbs.push(new Orb(x,y,color,type));if(orbs.length>35)orbs.shift();},600);}
function spawnBurdenOrbs(){setInterval(()=>{if(!gameRunning||phase!==2)return;let x=Math.random()*canvas.width,y=Math.random()*canvas.height/2,r=Math.random(),color='green',type='green';if(r<0.2){color='#ef4444';type='red';}else if(r<0.4){color='#3b82f6';type='blue';}orbs.push(new Orb(x,y,color,type));if(orbs.length>35)orbs.shift();},700);}
function initGarden(){for(let i=0;i<9;i++)flowers.push(new Flower(100+i%3*canvas.width/3,100+Math.floor(i/3)*canvas.height/4));}
function spawnCatchLight(){setInterval(()=>{if(!gameRunning||phase!==4)return;lights.push(new LightOrb(Math.random()*canvas.width,Math.random()*canvas.height));if(lights.length>20)lights.shift();},700);}

// ----- Touch Controls -----
canvas.addEventListener('touchstart',e=>{let t=e.touches[0];handleTouch(t.clientX,t.clientY);});
canvas.addEventListener('touchmove',e=>{let t=e.touches[0];player.x=t.clientX;player.y=t.clientY;handleTouch(t.clientX,t.clientY);});
function handleTouch(x,y){if(phase===1||phase===2)orbs.forEach(o=>{if(!o.released)o.checkTap(x,y);});
if(phase===3)flowers.forEach(f=>{let dx=f.x-x,dy=f.y-y;if(Math.sqrt(dx*dx+dy*dy)<50)f.bloomed=true;});
if(phase===4)lights.forEach(l=>{let dx=l.x-x,dy=l.y-y;if(Math.sqrt(dx*dx+dy*dy)<l.radius){l.life=0;score++;}});}

// ----- Game Loop -----
function gameLoop(){ctx.clearRect(0,0,canvas.width,canvas.height);
orbs.forEach(o=>{o.move();o.draw();});
flowers.forEach(f=>f.draw());
lights.forEach(l=>{l.move();l.draw();});
particles.forEach((p,i)=>{p.update();p.draw();if(p.life<=0)particles.splice(i,1);});
if(gameRunning){if((phase===1||phase===2)&&orbs.length>0&&orbs.every(o=>o.released))nextPhase();
if(phase===3&&flowers.every(f=>f.bloomed))nextPhase();
if(phase===4&&score>=10)nextPhase();
requestAnimationFrame(gameLoop);}}
function nextPhase(){phase++;if(phase>4){gameRunning=false;canvas.style.display='none';endScreen.style.display='flex';}else{initPhase();}}

// ----- Start Button -----
function startGame(){startScreen.style.display='none';canvas.style.display='block';phase=1;gameRunning=true;initPhase();requestAnimationFrame(gameLoop);}
</script>
</body>
</html>
